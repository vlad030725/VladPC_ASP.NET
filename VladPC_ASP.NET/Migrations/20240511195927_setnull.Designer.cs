// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace VladPC_ASP.NET.Migrations
{
    [DbContext(typeof(ComputerStoreContext))]
    [Migration("20240511195927_setnull")]
    partial class setnull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainModel.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Companies");

                    b.ToTable("Companies", "dbo");
                });

            modelBuilder.Entity("DomainModel.Custom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdPromoCode")
                        .HasColumnType("integer");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int?>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Customs");

                    b.HasIndex(new[] { "IdPromoCode" }, "Customs_IX_IdPromoCode");

                    b.HasIndex(new[] { "IdStatus" }, "Customs_IX_IdStatus");

                    b.HasIndex(new[] { "IdUser" }, "Customs_IX_IdUser");

                    b.ToTable("Customs", "dbo");
                });

            modelBuilder.Entity("DomainModel.CustomRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCustom")
                        .HasColumnType("integer");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("integer");

                    b.Property<int?>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CustomRows");

                    b.HasIndex(new[] { "IdCustom" }, "CustomRows_IX_IdCustom");

                    b.HasIndex(new[] { "IdProduct" }, "CustomRows_IX_IdProduct");

                    b.ToTable("CustomRows", "dbo");
                });

            modelBuilder.Entity("DomainModel.FormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.FormFactors");

                    b.ToTable("FormFactors", "dbo");
                });

            modelBuilder.Entity("DomainModel.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", "dbo");
                });

            modelBuilder.Entity("DomainModel.Procurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Procurements");

                    b.ToTable("Procurements", "dbo");
                });

            modelBuilder.Entity("DomainModel.ProcurementRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("IdProcurement")
                        .HasColumnType("integer");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("integer");

                    b.Property<int?>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ProcurementRows");

                    b.HasIndex(new[] { "IdProcurement" }, "ProcurementRows_IX_IdProcurement");

                    b.HasIndex(new[] { "IdProduct" }, "ProcurementRows_IX_IdProduct");

                    b.ToTable("ProcurementRows", "dbo");
                });

            modelBuilder.Entity("DomainModel.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("CountCores")
                        .HasColumnType("integer");

                    b.Property<int?>("CountMemory")
                        .HasColumnType("integer");

                    b.Property<int?>("CountStreams")
                        .HasColumnType("integer");

                    b.Property<int?>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCompany")
                        .HasColumnType("integer");

                    b.Property<int?>("IdFormFactor")
                        .HasColumnType("integer");

                    b.Property<int?>("IdSocket")
                        .HasColumnType("integer");

                    b.Property<int?>("IdTypeMemory")
                        .HasColumnType("integer");

                    b.Property<int?>("IdTypeProduct")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSale")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Products");

                    b.HasIndex(new[] { "IdCompany" }, "Products_IX_IdCompany");

                    b.HasIndex(new[] { "IdFormFactor" }, "Products_IX_IdFormFactor");

                    b.HasIndex(new[] { "IdSocket" }, "Products_IX_IdSocket");

                    b.HasIndex(new[] { "IdTypeMemory" }, "Products_IX_IdTypeMemory");

                    b.HasIndex(new[] { "IdTypeProduct" }, "Products_IX_IdTypeProduct");

                    b.ToTable("Products", "dbo");
                });

            modelBuilder.Entity("DomainModel.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PromoCodes");

                    b.ToTable("PromoCodes", "dbo");
                });

            modelBuilder.Entity("DomainModel.Socket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Sockets");

                    b.ToTable("Sockets", "dbo");
                });

            modelBuilder.Entity("DomainModel.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Status");

                    b.ToTable("Status", "dbo");
                });

            modelBuilder.Entity("DomainModel.TypeMemory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TypeMemories");

                    b.ToTable("TypeMemories", "dbo");
                });

            modelBuilder.Entity("DomainModel.TypeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TypeProducts");

                    b.ToTable("TypeProducts", "dbo");
                });

            modelBuilder.Entity("DomainModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("DomainModel.Custom", b =>
                {
                    b.HasOne("DomainModel.PromoCode", "IdPromoCodeNavigation")
                        .WithMany("Customs")
                        .HasForeignKey("IdPromoCode")
                        .HasConstraintName("FK_dbo.Customs_dbo.PromoCodes_IdPromoCode");

                    b.HasOne("DomainModel.Status", "IdStatusNavigation")
                        .WithMany("Customs")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("FK_dbo.Customs_dbo.Status_IdStatus");

                    b.HasOne("DomainModel.User", "IdUserNavigation")
                        .WithMany("Customs")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_dbo.Customs_dbo.Users_IdUser");

                    b.Navigation("IdPromoCodeNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("DomainModel.CustomRow", b =>
                {
                    b.HasOne("DomainModel.Custom", "IdCustomNavigation")
                        .WithMany("CustomRows")
                        .HasForeignKey("IdCustom")
                        .HasConstraintName("FK_dbo.CustomRows_dbo.Customs_IdCustom");

                    b.HasOne("DomainModel.Product", "IdProductNavigation")
                        .WithMany("CustomRows")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_dbo.CustomRows_dbo.Products_IdProduct");

                    b.Navigation("IdCustomNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("DomainModel.ProcurementRow", b =>
                {
                    b.HasOne("DomainModel.Procurement", "IdProcurementNavigation")
                        .WithMany("ProcurementRows")
                        .HasForeignKey("IdProcurement")
                        .HasConstraintName("FK_dbo.ProcurementRows_dbo.Procurements_IdProcurement");

                    b.HasOne("DomainModel.Product", "IdProductNavigation")
                        .WithMany("ProcurementRows")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_dbo.ProcurementRows_dbo.Products_IdProduct");

                    b.Navigation("IdProcurementNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("DomainModel.Product", b =>
                {
                    b.HasOne("DomainModel.Company", "IdCompanyNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK_dbo.Products_dbo.Companies_IdCompany");

                    b.HasOne("DomainModel.FormFactor", "IdFormFactorNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdFormFactor")
                        .HasConstraintName("FK_dbo.Products_dbo.FormFactors_IdFormFactor");

                    b.HasOne("DomainModel.Socket", "IdSocketNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdSocket")
                        .HasConstraintName("FK_dbo.Products_dbo.Sockets_IdSocket");

                    b.HasOne("DomainModel.TypeMemory", "IdTypeMemoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdTypeMemory")
                        .HasConstraintName("FK_dbo.Products_dbo.TypeMemories_IdTypeMemory");

                    b.HasOne("DomainModel.TypeProduct", "IdTypeProductNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdTypeProduct")
                        .HasConstraintName("FK_dbo.Products_dbo.TypeProducts_IdTypeProduct");

                    b.Navigation("IdCompanyNavigation");

                    b.Navigation("IdFormFactorNavigation");

                    b.Navigation("IdSocketNavigation");

                    b.Navigation("IdTypeMemoryNavigation");

                    b.Navigation("IdTypeProductNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DomainModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DomainModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DomainModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Company", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainModel.Custom", b =>
                {
                    b.Navigation("CustomRows");
                });

            modelBuilder.Entity("DomainModel.FormFactor", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainModel.Procurement", b =>
                {
                    b.Navigation("ProcurementRows");
                });

            modelBuilder.Entity("DomainModel.Product", b =>
                {
                    b.Navigation("CustomRows");

                    b.Navigation("ProcurementRows");
                });

            modelBuilder.Entity("DomainModel.PromoCode", b =>
                {
                    b.Navigation("Customs");
                });

            modelBuilder.Entity("DomainModel.Socket", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainModel.Status", b =>
                {
                    b.Navigation("Customs");
                });

            modelBuilder.Entity("DomainModel.TypeMemory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainModel.TypeProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainModel.User", b =>
                {
                    b.Navigation("Customs");
                });
#pragma warning restore 612, 618
        }
    }
}
